<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="coderunner">
    <name>
      <text>isnumber</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[
<p>
Scrivere una funzione RISC-V \(isnumber\) che controlli se una stringa ricevuta come parametro è la rappresentazione di un numero intero positivo in ASCII. Controllare vuol dire: restituire 1 se la condizione è vera, 0 altrimenti.

\(isnumber\) deve utilizzare la funzione \(digit\) realizzata nell'esercizio precedente.
</p>

Il valore di ritorno deve essere lasciato sul registro \(a0\).

<br/><br/>Il seguente codice in \(C\) realizza \(isnumber\) (convertilo in RISC-V):

<pre>
int isnumber(char *numstr) {
    for (int i = 0; numstr[i] != '\0'; i++);
        if (!digit(numstr[i]))
            return 0;
    return 1;
}
</pre>

<br><b>Attenzione:</b>
<ul>
    <li>Incollare nel campo di sotto soltanto il contenuto della funzione \(isnumber\) (in RISC-V)</li>
    <li>Attenzione alle convenzioni di chiamata!</li>
    <li>Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS</li>
</ul>

<pre>
.globl _start
.data
    numstr: .string  "1234"
.text
_start:
    # call isnumber
    la   a0, numstr
    jal  ra, isnumber

    #exit
    li   a7, 10
    ecall

#****************************************************
# completare la funzione isnumber nel campo di sotto
</pre>


]]>
    </text>
    </questiontext>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>riscv</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload>isnumber:</answerpreload>
    <globalextra><![CDATA[
#*******************************************************************************
# main()
#*******************************************************************************
_start:
    # puts numbers on the saved registers
    start_saved_registers_nonleaf

    # call isnumber
    la   a0, numstr
    jal  ra, isnumber
    printreg a0, __ra0

    # check whether the saved registers are preserved
    check_saved_registers

#*******************************************************************************
# digit
#
# a0 - char
#*******************************************************************************
digit:
    li t0, 48
    li t1, 57
    blt a0, t0, return_0
    bgt a0, t1, return_0
    li a0, 1
    exit_required_leaf_function
    ret
return_0:
    li a0, 0
    exit_required_leaf_function
    ret



]]>
    </globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[
#*******************************************************************************
# isnumber
#
# a0 -> d
#*******************************************************************************
isnumber:
    addi sp, sp, -24
    sd ra, 0(sp)
    sd a0, 8(sp)
    sd s1, 16(sp)
    li s1, 0
loop_on_string:
    lbu a0, 0(a0)
    beq a0, zero, isnum_return_1
    jal digit
    beq a0, zero, isnum_return_0
    ld a0, 8(sp)
    addi s1, s1, 1
    add a0, a0, s1
    j loop_on_string
isnum_return_0:
    li a0, 0
    j isnumber_return
isnum_return_1:
    li a0, 1
isnumber_return:
    ld ra, 0(sp)
    ld s1, 16(sp)
    addi sp, sp, 24
    ret


]]>
    </answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>

<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "s"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "s"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "0"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "0"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "1234567890"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "1234567890"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "9"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "9"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "5s7"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "5s7"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "o"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "o"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "."

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "."

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
    </testcases>
  </question>
</quiz>
