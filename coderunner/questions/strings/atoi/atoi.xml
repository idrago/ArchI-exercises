<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="coderunner">
    <name>
      <text>atoi</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[
<p>
Scrivere una funzione RISC-V \(atoi\) che converta una stringa ASCII con un numero intero positivo in una variabile numerica (intero in complemento a 2). Il valore numerico ottenuto deve essere restituito al chiamante nel registro \(a0\).
<br/><br/>
Vedere il codice \(atoi\) in C sottoriportato.
</p>

<pre>
unsigned long atoi(char *str, unsigned long n) {
    if (n == 0)
      return 0;
    return (10*atoi(str, n-1) + str[n-1] - '0');
}
</pre>
  

<br><b>Attenzione:</b>
<ul>
    <li>Incollare nel campo di sotto soltanto il contenuto della funzione \(atoi\) (in RISC-V)</li>
    <li>Attenzione alle convenzioni di chiamata!</li>
    <li>Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS</li>
</ul>

<pre>
.globl _start
.data
    numstr: .string  "123"
.text
_start:
    # chiama strlen per ottenere la lunghezza della stringa
    la   a0, numstr
    jal  ra, strlen
    
    # chiama atoi
    mv   a1, a0
    la   a0, numstr
    jal  ra, atoi

    #exit
    li   a7, 10
    ecall

#*******************************************************************************
# strlen
# a0 - str
#*******************************************************************************
strlen:
        add  t0, zero, zero
strlen_loop:
        add  t1, t0, a0    
        lbu  t1, 0(t1)     
        beq  t1, zero, strlen_end
        addi t0, t0, 1 
        j    strlen_loop
strlen_end:
        addi a0, t0, 0
        ret    

#****************************************************
# completare la funzione atoi nel campo di sotto
</pre>


]]>
    </text>
    </questiontext>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>riscv</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload>atoi:</answerpreload>
    <globalextra><![CDATA[
#*******************************************************************************
# main()
#*******************************************************************************
_start:
	# puts numbers on the saved registers
	start_saved_registers_leaf

	# call strlen
    la   a0, numstr
    jal  ra, __strlen
	
    # call atoi
    mv   a1, a0
    la   a0, numstr
    jal  ra, atoi

	printreg a0, __ra0

	# check whether the saved registers are preserved
	check_saved_registers


]]>
    </globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[
#*******************************************************************************
# atoi(str, n)
# a0 - str
# a1 - n
#*******************************************************************************
atoi:
  	bne  a1, zero, go_ahead	# if (n!=0) continue
	add  a0, zero, zero
	jr   ra

go_ahead:
	addi sp, sp, -16
	sd	 ra, 0(sp)
	sd   s1, 8(sp)		
	
	addi a1, a1, -1		# n-1
	add  t0, a0, a1		# offset str[n-1]
	lbu  s1, 0(t0)		# load on s1 value on str[n-1]
	addi s1, s1, -48	# convert it to numeric value: s1=str[n-1] - '0'
	jal  atoi		    # a0 has the result of atoi(str, n-1)
	
	li 	 t0, 10
	mul  t0, t0, a0		# 10 * atoi(str, n-1)
	add  a0, s1, t0	    # atoi(str, n) = 10*atoi(str, n-1) + str[n-1] - '0'
	
	ld 	 ra, 0(sp)
	ld   s1, 8(sp)
	addi sp, sp, 16
	jr   ra


]]>
    </answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>

<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "1"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "1"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "12"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 12</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "12"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "1234567890"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1234567890</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "1234567890"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string "00001"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string "00001"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    numstr: .string ""

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    numstr: .string ""

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
    </testcases>
  </question>
</quiz>
