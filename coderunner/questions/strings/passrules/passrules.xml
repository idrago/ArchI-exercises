<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="coderunner">
    <name>
      <text>passrules</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[
<p>Usando il linguaggio assemblativo del RISC-V, scrivere una funzione \(passrules\) che riceva:</p>

<ul>
    <li>sul registro \(a0\), <b>l'indirizzo</b> in memoria di una stringa (array di byte)</li>
</ul>

<br/>
La funzione ritorna \(1\) se la stringa ricevuta contiene almeno 1 carattere maiuscolo ed almeno 1 carattere cifra. 
La funzione ritorna \(0\) in caso contrario.

<br/><br/>Il seguente codice in \(C\) realizza \(passrules\) (convertilo in RISC-V):

<pre>
int passrules(char str[]) {
    int uppercase = contains(str, 'A', 'Z');
    int numbers   = contains(str, '0', '9');
    return (uppercase && numbers);
}

// Tabella ASCII:
// ASCII 'A' -- hex: 0x41 dec: 65
// ASCII 'Z' -- hex: 0x5a dec: 90
// ASCII '0' -- hex: 0x30 dec: 48
// ASCII '9' -- hex: 0x39 dec: 57
</pre>

Il valore di ritorno deve essere lasciato sul registro \(a0\).

<br/><br/>
<b>\(passrules\) deve utilizzare \(contains\) sviluppata nell'esercizio precedente.</b>

<br><b>Attenzione:</b>
<ul>
    <li>NON INCOLLARE IL CODICE DI \(contains\) NELLA RISPOSTA</li>
    <li>Incollare nel campo di sotto soltanto il contenuto della funzione \(passrules\) (in RISC-V)</li>
    <li>Attenzione alle convenzioni di chiamata!</li>
    <li>Usare il seguente codice “main” per sviluppo e debugging nel simulatore RARS</li>
</ul>

<pre>
.globl _start
.data
      buffer: .string  "BADPass4"
.text
_start:
    # call passrules
    la   a0, buffer
    jal  ra, passrules

    #exit
    li   a7, 10
    ecall

#****************************************************
# completare la funzione passrules nel campo di sotto
</pre>


]]>
    </text>
    </questiontext>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>riscv</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload>passrules:</answerpreload>
    <globalextra><![CDATA[
#*******************************************************************************
# main()
#*******************************************************************************
_start:
      # puts numbers on the saved registers
      start_saved_registers_nonleaf

      # call passrules
      la   a0, buffer
      jal  ra, passrules
      printreg a0, __ra0

      # check whether the saved registers are preserved
      check_saved_registers

#*******************************************************************************
# Contains
#
# a0 - str
# a1 - low
# a2 - high
#*******************************************************************************
contains:
      lbu   t1, 0(a0)                # reads a char and move pointer
      addi  a0, a0, 1

      beqz  t1, contains_zero        # string is over without find char
      blt   t1, a1, contains         # if not in range, continue
      bgt   t1, a2, contains

      li    a0, 1                    # found, return
      exit_required_leaf_function
      ret
contains_zero:
      li    a0, 0                    # not found, return
      exit_required_leaf_function
      ret



]]>
    </globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[
#*******************************************************************************
# passrules
#
# a0 - str
#*******************************************************************************
passrules:
      addi  sp, sp, -24
      sd    ra, 0(sp)
      sd    a0, 8(sp)
      sd    s0, 16(sp)

      li    a1, 'A'
      li    a2, 'Z'
      jal   ra, contains
      add   s0, a0, zero

      ld    a0, 8(sp)
      li    a1, '0'
      li    a2, '9'
      jal   ra, contains

      and   a0, a0, s0

      ld    ra, 0(sp)
      ld    s0, 16(sp)
      addi  sp, sp, 24
      ret



]]>
    </answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>

<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  "BadPAss!"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  "BadPAss!"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  "BadPAss1"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  "BadPAss1"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  ""

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  ""

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  "badpass"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  "badpass"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  "Aadpass0"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  "Aadpass0"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  "0badpasZ"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  "0badpasZ"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  "1"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  "1"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  "ZA"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  "ZA"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    buffer: .string  "0A"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    buffer: .string  "0A"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
    </testcases>
  </question>
</quiz>
