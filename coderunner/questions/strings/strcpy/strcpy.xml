<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="coderunner">
    <name>
      <text>strcpy</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[
<p>
Scrivere una procedura RISC-V \(strcpy\) per copiare una stringa in un'altra. 
Assumere che \(dststr\) abbia spazio sufficiente in memoria per ricevere i byte di \(srcstr\).
</p>

<p>
Nota: \(strcpy\) deve utilizzare  \(strlen\), come in questo codice in C:
</p>

<pre>
void strcpy(char *dst, char *src) {
    unsigned long i;
    unsigned long n, m;

    n = strlen(src);    
    m = strlen(dst);

    for (i = 0; i < n; i++)
        dst[i] = src[i];
    for ( ; i < m; i++)
        dst[i] = '\0';
    return;
}
</pre>

<br><b>Attenzione:</b>
<ul>
    <li>NON INCOLLARE IL CODICE DI \(strlen\) NELLA RISPOSTA</li>
    <li>Incollare nel campo di sotto soltanto il contenuto della funzione \(strcpy\) (in RISC-V)</li>
    <li>Attenzione alle convenzioni di chiamata!</li>
    <li>Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS</li>
</ul>

<pre>
.globl _start
.data
    srcstr: .string  "string to be copied"
    dststr: .string  "destination string is long enough"
.text
_start:
    
    # chiama strcpy    
    la   a0, srcstr
    la   a1, dststr
    jal  ra, strcpy

    #exit
    li   a7, 10
    ecall

#*******************************************************************************
# strlen
# a0 - str
#*******************************************************************************
strlen:
        add  t0, zero, zero
strlen_loop:
        add  t1, t0, a0    
        lbu  t1, 0(t1)     
        beq  t1, zero, strlen_end
        addi t0, t0, 1 
        j    strlen_loop
strlen_end:
        addi a0, t0, 0
        ret    

#****************************************************
# completare la funzione strcpy nel campo di sotto
</pre>
]]>
    </text>
    </questiontext>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>riscv</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload>strcpy:</answerpreload>
    <globalextra><![CDATA[
.section .rodata
.align 2
__varname: .string "dststr: "

.section .text

#*******************************************************************************
# main()
#*******************************************************************************
_start:
      # puts numbers on the saved registers
      start_saved_registers_nonleaf

      # call strcpy
      la   a0, srcstr
      la   a1, dststr
      jal  ra, strcpy

      # print the result
      la   a0, __varname
      jal __printstr
      la   a0, dststr
      jal __printstr
      la   a0, __nl
      jal __printstr

      # check whether the saved registers are preserved
      check_saved_registers
      
#*******************************************************************************
# strlen
# a0 - str
#*******************************************************************************
strlen:
      add  t0, zero, zero
strlen_loop:
      add  t1, t0, a0    
      lbu  t1, 0(t1)     
      beq  t1, zero, strlen_end
      addi t0, t0, 1 
      j    strlen_loop
strlen_end:
      addi a0, t0, 0
      exit_required_leaf_function
      ret       


]]>
    </globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[
################################################################################
# strcpy
# a0 = char *dst
# a1 = const char *src
################################################################################
strcpy:
      addi sp, sp, -32
      sd   ra, 0(sp)
      sd   a0, 8(sp)
      sd   a1, 16(sp)
      sd   s1, 24(sp)

      jal  ra, strlen            # strlen src
      add  s1, a0, zero          # s1 = n

      ld   a0, 16(sp)            # strlen dst
      jal  ra, strlen
      add  t0, a0, zero          # t0 = m -> assuming m > n
      sub  t1, t0, s1	         # t1 = m-n

      ld   a0, 8(sp)             # recover a0
      ld   a1, 16(sp)            # recover a1
STRCPY_L1:
      beq  t0, zero, STRCPY_L4   # done if i == m
      ble  t0, t1, STRCPY_L2     # if i > n then put a \0
      lbu  t2, 0(a0)             # dereference str[i]
      sb   t2, 0(a1)             # str[i] -> dst[i]
      addi a0, a0, 1             # increment a0
      j    STRCPY_L3
STRCPY_L2:                       # else put a \0
      sb   zero, 0(a1)
STRCPY_L3:
      addi a1, a1, 1             # increment the other registers
      addi t0, t0, -1
      j    STRCPY_L1             # loop

STRCPY_L4:
      ld   s1, 24(sp)
      ld   ra, 0(sp)
      addi sp, sp, 32
      ret


]]>
    </answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>

<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  srcstr: .string  "string to be copied"
  dststr: .string  "destination string is long enough"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>dststr: string to be copied</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  srcstr: .string  "string to be copied"
  dststr: .string  "destination string is long enough"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  srcstr: .string  ""
  dststr: .string  "destination string is long enough"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>dststr: </text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  srcstr: .string  ""
  dststr: .string  "destination string is long enough"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  srcstr: .string  "s"
  dststr: .string  "destination string is long enough"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>dststr: s</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  srcstr: .string  "s"
  dststr: .string  "destination string is long enough"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  srcstr: .string  "test"
  dststr: .string  "test"

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>dststr: test</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  srcstr: .string  "test"
  dststr: .string  "test"

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
    </testcases>
  </question>
</quiz>
