<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="coderunner">
    <name>
      <text>invert</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[
<p>
Scrivere una procedura \(invert(array, size)\), che utilizzi \(swap\) (definita nell'esercizio precedente) per invertire un array in memoria.
</p>

<br/>Il seguente codice in \(C\) realizza \(invert\) (convertilo in RISC-V):
<pre>
void invert(int[] array, int size) {
    int i;
    for (i = 0; i < size/2; i++) {
        swap(array, i, size-i-1);
    }
}    
</pre>


<br><b>Attenzione:</b>
<ul>
    <li>NON INCOLLARE IL CODICE DI \(swap\) NELLA RISPOSTA</li>    
    <li>Incollare nel campo di sotto soltanto il contenuto della funzione \(invert\) (in RISC-V)</li>
    <li>Attenzione alle convenzioni di chiamata!</li>
    <li>Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS</li>
</ul>

<pre>
.globl _start
.data
    size:  .word 8
    array: .word 1,5,3,7,2,6,4,8
.text
_start:
    # chiama invert
    la   a0, array
    la   a1, size
    lw   a1, 0(a1)        
    jal  ra, invert
    
    #exit
    li   a7, 10
    ecall

#***************************************************
# completare la funzione invert nel campo di sotto
</pre>
    
]]>
    </text>
    </questiontext>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>riscv</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload>invert:</answerpreload>
    <globalextra><![CDATA[
#*******************************************************************************
# main()
#*******************************************************************************
_start:    
    # puts numbers on the saved registers
    start_saved_registers_nonleaf

    # chiama invert
    la   a0, array
    la   a1, size
    lw   a1, 0(a1)
    jal  ra, invert

    # print results
    la   a0, array
    la   a1, size
    lw   a1, 0(a1)
    jal __print_array

    # check whether the saved registers are preserved
    check_saved_registers

################################################################################
# Procedure swap(v, x, y)
# a0  -> address of v
# a1 -> index x
# a2 -> index y
# does not return anything
################################################################################
swap:
      slli  a1, a1, 2     # calculates offset of x
      slli  a2, a2, 2     # calculates offset of y
      add   t0, a0, a1    # address of v[x]
      add   t1, a0, a2    # address of v[y]

      lw    t2, 0(t0)     # sway the values
      lw    t3, 0(t1)
      sw    t3, 0(t0)
      sw    t2, 0(t1)
      
      exit_required_leaf_function
      ret                 # return


]]>
    </globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[
################################################################################
# Procedure invert(v)
# a0 -> v address
# a1 -> v size
################################################################################
invert:
      addi  sp, sp, -32
      sd    ra, 0(sp)
      sd    a0, 8(sp)
      sd    s1, 16(sp)
      sd    s2, 24(sp)

      addi  s1, zero, 0         # index of first element
      addi  s2, a1, -1          # index of last element
LOOP_invert:
      blt   s2, s1, END_invert  # if s2 < s1 goto end

      ld    a0, 8(sp)
      add   a1, s1, zero
      add   a2, s2, zero
      jal   ra, swap
      addi  s1, s1, 1
      addi  s2, s2, -1
      j     LOOP_invert
END_invert:

      ld    ra, 0(sp)           # restore the return address
      ld    s1, 16(sp)
      ld    s2, 24(sp)
      addi  sp, sp, 32          # restore the stack pointer
      ret


]]>
    </answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>

<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 8
    array: .word 1,2,3,4,5,6,7,8

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 8 7 6 5 4 3 2 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 8
    array: .word 1,2,3,4,5,6,7,8

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 2
    array: .word 1,5

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 5 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 2
    array: .word 1,5

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 8
    array: .word 1,5,3,7,2,6,4,8

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 8 4 6 2 7 3 5 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 8
    array: .word 1,5,3,7,2,6,4,8

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 5
    array: .word 1,5,3,7,2

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 2 7 3 5 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 5
    array: .word 1,5,3,7,2

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 1
    array: .word 5

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 5</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 1
    array: .word 5

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
    </testcases>
  </question>
</quiz>
