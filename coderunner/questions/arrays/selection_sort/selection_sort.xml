<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="coderunner">
    <name>
      <text>selection_sort</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[
<p>
Usando \(minarray(array, size)\) e la procedura \(swap(array, x, y)\) (che scambia i valori di \(array[x]\) e \(array[y]\)), scrivere una 
funzione ricorsiva per ordinare un array di numeri interi chiamata \(selection\_sort\):
</p>

Il seguente codice in C implementa la funzione \(selection\_sort\)  (convertilo in RISC-V):
<pre>
void selection_sort(int array[], int size) {
    if (size <= 1) 
        return;
    
    int min_idx = minarray(array, size);
    swap(array, 0, min_idx);
    selection_sort(array+1, size-1);
}  
</pre>

\(selection\_sort\) non ritorna alcun valore, ma modifica l'array passato come parametro direttamente in memoria.

<br><b>Attenzione:</b>
<ul>
    <li>NON INCOLLARE IL CODICE DI \(swap\) e \(minarray\) NELLA RISPOSTA</li>
    <li>Incollare nel campo di sotto soltanto il contenuto della funzione \(selection_sort\) (in RISC-V)</li>
    <li>Attenzione alle convenzioni di chiamata!</li>
    <li>Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS</li>
</ul>

<pre>
  .globl _start
  .data
    size:  .word  10
    array: .word  3,1,6,6,23,17,9,25,3,4
  
  .text
  _start:
      # chiama selection_sort
      la   a0, array
      la   a1, size
      lw   a1, 0(a1)
      jal  ra, selection_sort
      
      #exit
      li   a7, 10
      ecall   

#****************************************************
# completare la funzione selection_sort nel campo di sotto
</pre>


]]>
    </text>
    </questiontext>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>riscv</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload>selection_sort:</answerpreload>
    <globalextra><![CDATA[
#*******************************************************************************
# main()
#*******************************************************************************
_start:    
    # puts numbers on the saved registers
    start_saved_registers_nonleaf

    # chiama selection_sort
    la   a0, array
    la   a1, size
    lw   a1, 0(a1)
    jal  ra, selection_sort

    # print results
    la   a0, array
    la   a1, size
    lw   a1, 0(a1)
    jal __print_array

    # check whether the saved registers are preserved
    check_saved_registers

################################################################################
# Procedure minarray
#   Input:  a0 = array, a1 = size
#   Output: a0 = min_idx
################################################################################
minarray:
  li   t0, 0     # min_idx
  lw   t1, 0(a0) # min_value
  li   t2, 1     # i

  minarray_loop:
    # check if i == size
    beq  t2, a1, minarray_end

    # check if array[i] < min
    slli t3, t2, 2
    add  t3, a0, t3
    lw   t3, 0(t3)
    bgt  t3, t1, minarray_continue

    # update min
    mv   t1, t3
    mv   t0, t2

  minarray_continue:    
    addi t2, t2, 1  # increment i
  j minarray_loop

  minarray_end:
    mv   a0, t0
    exit_required_leaf_function
    jr   ra

################################################################################
# Procedure swap(array, x, y)
# a0  -> address of array
# a1 -> index x
# a2 -> index y
# does not return anything
################################################################################
swap:
      slli  a1, a1, 2     # calculates offset of x
      slli  a2, a2, 2     # calculates offset of y
      add   t0, a0, a1    # address of array[x]
      add   t1, a0, a2    # address of array[y]

      lw    t2, 0(t0)     # swap the values
      lw    t3, 0(t1)
      sw    t3, 0(t0)
      sw    t2, 0(t1)
      ret                 # return        


]]>
    </globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[
################################################################################
# Procedure selection_sort
#   Input:  a0 = array, a1 = size
#   Output: none
################################################################################
selection_sort:
	bne	a1,zero, selection_sort_continue
	ret
selection_sort_continue:
	addi sp,sp,-32
	sd	ra,24(sp)
	sd  s0,16(sp)
	sd  s1,8(sp)

	mv	s1,a0
	mv	s0,a1
	call minarray

	mv	a2,a0
	li	a1,0
	mv	a0,s1
	call swap

	addi a1,s0,-1
	addi a0,s1,4
	call selection_sort

	ld	 ra,24(sp)
	ld	 s0,16(sp)
	ld	 s1,8(sp)
	addi sp,sp,32
	jr	ra


]]>
    </answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>

<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 8
    array: .word 1,2,3,4,5,6,7,8

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 1 2 3 4 5 6 7 8</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 8
    array: .word 1,2,3,4,5,6,7,8

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 2
    array: .word 5,1

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 1 5</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 2
    array: .word 5,1

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 2
    array: .word 5,5

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 5 5</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 2
    array: .word 5,5

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 8
    array: .word 1,5,3,7,2,6,4,8

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 1 2 3 4 5 6 7 8</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 8
    array: .word 1,5,3,7,2,6,4,8

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 5
    array: .word 1,5,3,7,2

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 1 2 3 5 7</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 5
    array: .word 1,5,3,7,2

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size:  .word 1
    array: .word 5

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>array = 5</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size:  .word 1
    array: .word 5

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
    </testcases>
  </question>
</quiz>
