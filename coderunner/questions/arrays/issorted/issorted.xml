<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="coderunner">
    <name>
      <text>issorted</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[
<p>
Scrivere una funzione RISC-V che verifichi se un array di N numeri in memoria (word contigue) contiene una sequenza ordinata di numeri interi (crescente). Verificare vuol dire: restituire 1 se la condizione Ã¨ vera, 0 altrimenti.
</p>

<br/>Il seguente codice in \(C\) realizza \(issorted\) (convertilo in RISC-V):
<pre>
int issorted(int[] array, int size) {
    for (int i = 0; i < size-1; i++) {
        if (array[i] > array[i+1]) {
            return 0;
        }
    }
    return 1;
} 
</pre>

Il valore di ritorno deve essere lasciato sul registro \(a0\).

<br><b>Attenzione:</b>
<ul>
    <li>Incollare nel campo di sotto soltanto il contenuto della funzione \(issorted\) (in RISC-V)</li>
    <li>Attenzione alle convenzioni di chiamata!</li>
    <li>Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS</li>
</ul>

<pre>
.globl _start
.data
  size:  .word  10
  array: .word  1,3,5,6,7,8,9,25,30,40

.text
_start:
    # chiama issorted
    la   a0, array
    la   a1, size
    lw   a1, 0(a1)
    jal  ra, issorted
    
    #exit
    li   a7, 10
    ecall   

#****************************************************
# completare la funzione issorted nel campo di sotto    
</pre>

]]>
    </text>
    </questiontext>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>riscv</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload>issorted:</answerpreload>
    <globalextra><![CDATA[
#*******************************************************************************
# main()
#*******************************************************************************
_start:    
    # puts numbers on the saved registers
    start_saved_registers_leaf

    # chiama issorted
    la   a0, array
    la   a1, size
    lw   a1, 0(a1)
    jal  ra, issorted

    # print results
    printreg a0, __ra0

    # check whether the saved registers are preserved
    check_saved_registers


]]>
    </globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[
################################################################################
# Procedure issorted
#   Input:  a0 = array, a1 = size
#   Output: a0 = 1 if the array is sorted, 0 otherwise
################################################################################
issorted:  
  beq a1, zero, issorted_return1

  li t0, 1                # idx
  lw t1, 0(a0)            # t1 contiene last

  issorted_loop:
    beq t0, a1, issorted_return1
    addi a0, a0, 4
    lw t2, 0(a0)
    blt t2, t1, issorted_return0 
    mv t1, t2
    addi t0, t0, 1
    j issorted_loop

  issorted_return1: 
    li a0, 1
    jr ra

  issorted_return0:
    li a0, 0
    jr ra


]]>
    </answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>

<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size: .word 1
    array: .word 4

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size: .word 1
    array: .word 4

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size: .word 2
    array: .word 1, 2

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size: .word 2
    array: .word 1, 2

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size: .word 5
    array: .word 1, 2, 5, 4, 3

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size: .word 5
    array: .word 1, 2, 5, 4, 3

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size: .word 5
    array: .word 1, 2, 3, 4, 5

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size: .word 5
    array: .word 1, 2, 3, 4, 5

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size: .word 2
    array: .word 2, 1

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size: .word 2
    array: .word 2, 1

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
    size: .word 2
    array: .word 1, 1

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
    size: .word 2
    array: .word 1, 1

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
    </testcases>
  </question>
</quiz>
