<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="coderunner">
    <name>
      <text>mcd</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[
<p>
Scrivere una procedura RISC-V per il calcolo del massimo comune divisore di due numeri 
interi positivi \(a\) e \(b\). A tale scopo, implementare l'algoritmo di Euclide come procedura \(MCD(a,b)\) 
da richiamare nel main. L'algoritmo di Euclide in pseudo-codice Ã¨ il seguente:
</p>

<pre>
int MCD(int a, int b) {
    while (a != b) { 
        if (a > b)
            a = a - b;
        else
            b = b - a;
    }
    return a;
}
</pre>

Il valore di ritorno deve essere lasciato sul registro \(a0\).

<br><b>Attenzione:</b>
<ul>
    <li>Incollare nel campo di sotto soltanto il contenuto della funzione \(MCD\) (in RISC-V)</li>
    <li>Attenzione alle convenzioni di chiamata!</li>
    <li>Usare il seguente codice "main" per sviluppo e debugging nel simulatore RARS</li>
</ul>

<pre>
.globl _start
.data
    num1: .dword 24
    num2: .dword 30
.text
_start:
    # call MCD
    la    a0, num1
    la    a1, num2
    ld    a0, 0(a0)
    ld    a1, 0(a1)     
    jal   ra, mcd

    #exit
    li    a7, 10
    ecall

#****************************************************
# completare la funzione MCD nel campo di sotto
</pre>


]]>
    </text>
    </questiontext>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>riscv</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload>mcd:</answerpreload>
    <globalextra><![CDATA[
#*******************************************************************************
# main()
#*******************************************************************************
_start:
      # puts numbers on the saved registers
      start_saved_registers_leaf

      # call MCD
      la    a0, num1
      la    a1, num2
      ld    a0, 0(a0)
      ld    a1, 0(a1)     
      jal   ra, mcd
      printreg a0, __ra0

      # check whether the saved registers are preserved
      check_saved_registers


]]>
    </globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[
#*******************************************************************************
# MCD(a,b)
#
# a0 -> a
# a1 -> b
#*******************************************************************************
mcd:
      # as we do not touch SP e FP we skip this
      # addi    sp, sp, -8    # open space for a double word
      # sd      fp, 0(sp)     # save the previous frame pointer
mcd_while:
      beq     a0, a1, mcd_end
      bge     a1, a0, mcd_else
      sub     a0, a0, a1
      j       mcd_while
mcd_else:
      sub     a1, a1, a0
      j       mcd_while
mcd_end:
      # ld      fp, 0(sp)     # restore the frame pointer
      # addi    sp, sp, 8     # restore the stack pointer
      ret


]]>
    </answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>

<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  num1: .dword 24
  num2: .dword 30

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 6</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  num1: .dword 24
  num2: .dword 30

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  num1: .dword 1
  num2: .dword 30

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  num1: .dword 1
  num2: .dword 30

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  num1: .dword 7
  num2: .dword 17

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 1</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  num1: .dword 7
  num2: .dword 17

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  num1: .dword 50
  num2: .dword 10

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 10</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  num1: .dword 50
  num2: .dword 10

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  num1: .dword 0
  num2: .dword 0

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 0</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  num1: .dword 0
  num2: .dword 0

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  num1: .dword 30
  num2: .dword 24

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 6</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  num1: .dword 30
  num2: .dword 24

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.00">
    <testcode>
        <text><![CDATA[
.section .data
  num1: .dword 13
  num2: .dword 13

        ]]>
        </text>
    </testcode>
    <stdin>
        <text></text>
    </stdin>
    <expected>
        <text>a0: 13</text>
    </expected>
    <extra>
        <text><![CDATA[
.section .data
  num1: .dword 13
  num2: .dword 13

        ]]></text>
    </extra>
    <display>
        <text>SHOW</text>
    </display>
</testcase>
    </testcases>
  </question>
</quiz>
